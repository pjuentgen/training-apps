apiVersion: v1
kind: Namespace
metadata:
  name: spring-boot-demo
  labels:
    app: spring-boot-demo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-boot-demo
  namespace: spring-boot-demo
  labels:
    app: spring-boot-demo
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: spring-boot-demo
  template:
    metadata:
      labels:
        app: spring-boot-demo
        version: v1
    spec:
      containers:
      - name: spring-boot-demo
        image: ghcr.io/YOUR_USERNAME/training-apps:IMAGE_TAG
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
        - name: SERVER_PORT
          value: "8080"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/stats
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/stats
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
      securityContext:
        fsGroup: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: spring-boot-demo-service
  namespace: spring-boot-demo
  labels:
    app: spring-boot-demo
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: spring-boot-demo
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: spring-boot-demo-ingress
  namespace: spring-boot-demo
  labels:
    app: spring-boot-demo
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - spring-boot-demo.yourdomain.com
    secretName: spring-boot-demo-tls
  rules:
  - host: spring-boot-demo.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: spring-boot-demo-service
            port:
              number: 80